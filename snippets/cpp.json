{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"include <>": {
		"prefix": ["#include<>", "include<>"],
		"body": "#include <${1:bits/stdc++.h}>$0"
	},

	"include \"\"": {
		"prefix": ["#include\"\"", "include\"\""],
		"body": "#include \"${1:bits/stdc++.h}\"$0"
	},

	"main": {
		"prefix": "main()",
		"body": [
		"#include <bits/stdc++.h>",
		"#define _for(i,b,e) for (common_type_t <decltype (b), decltype (e)> i = (b), i ## __end = (e); i < i ## __end; ++ i)",
		"#define FOR(...)    _for (__VA_ARGS__)",
		"#define rep(i,n)    FOR(i, size_t{}, n)",
		"#define ALL(x)      begin (x), end (x)",
		"using namespace std;",
		"using ll = int64_t;",
		"",
		"auto main () -> int",
		"{",
		"\tcin.tie (nullptr);",
		"\tios::sync_with_stdio (false);",
		"",
		"\t$0",
		"}",
		""
		]
	},

	"if": {
		"prefix": "if()",
		"body": "if (${1:/* condition */})$0"
	},

	"else if": {
		"prefix": "else if()",
		"body": "else if (${1:/* condition */})$0"
	},

	"while": {
		"prefix": "while()",
		"body": "while (${1:/* condition */})$0"
	},

	"do while": {
		"prefix": "do while();",
		"body": [
			"do",
			"{",
			"\t$0",
			"} while (${1:/* condition */});"
		]
	},

	"for loop": {
		"prefix": "for()",
		"body": "for (${1:auto} ${2:i} = ${3:0}; $2 < ${4:n}; ++ $2)$0"
	},

	"for loop reverse": {
		"prefix": "for()",
		"body": "for (${1:auto} ${2:i} = ${3:n}; $2 -- > ${4:0};)$0"
	},

	"for loop with iterator": {
		"prefix": "for()",
		"body": "for (auto ${1:ite} = begin (${2:v}); $1 != end ($2); ++ $1)$0"
	},

	"range-based for loop": {
		"prefix": ["for()", "range-based"],
		"body": "for (auto && ${1:elem} : ${2:v})$0"
	},

	"switch": {
		"prefix": "switch()",
		"body": [
		  "switch (${1:tag})",
		  "{",
		  "$0",
		  "}"
		]
	},

	"case": {
		"prefix": "case",
		"body": [
		  "case ${1:/* integral constant */}:",
		  "\t$0",
		  "\tbreak;"
		]
	},

	"goto": {
		"prefix": "goto",
		"body": "goto ${1:label};$0"
	},

	"return": {
		"prefix": "return",
		"body": "return ${1:res};$0"
	},

	"try - catch": {
		"prefix": "try-catch",
		"body": [
			"try",
			"{",
			"\t$0",
			"}",
			"catch (const ${1:exception} & ${2:e})",
			"{",
			"\tcerr << $2.what () << endl;",
			"}"
		]
	},

	"throw": {
		"prefix": "throw",
		"body": "throw ${1:/* expression */};$0"
	},

	"sizeof": {
		"prefix": "sizeof()",
		"body": "sizeof (${1:/* type or expression */})$0"
	},

	"alignof": {
		"prefix": "alignof()",
		"body": "alignof (${1:/* type */})$0"
	},

	"decltype": {
		"prefix": "decltype()",
		"body": "decltype (${1:/* expression */})$0"
	},
	
	"decltype(auto)": {
		"prefix": "decltype(auto)",
		"body": "decltype (auto)$0"
	},

	"noexcept expression": {
		"prefix": "noexcept()",
		"body": "noexcept (${1:/* expression */})$0"
	},

	"static_cast": {
		"prefix": "static_cast<>()",
		"body": "static_cast <${1:/* type */}> (${2:/* expression */})$0"
	},

	"static_assert": {
		"prefix": "static_assert()",
		"body": "static_assert (${1:/* condition */});$0"
	},

	"namespace": {
		"prefix": "namespace{}",
		"body": [
			"namespace ${1:detail}",
			"{",
			"\t$0",
			"} // namespace $1"
		]
	},

	"template": {
		"prefix": "template<>",
		"body": "template <$0>"
	},

	"lambda": {
		"prefix": "lambda",
		"body": [
			"[&] () {",
			"\treturn;$0",
			"}"
		]
	},

	"lambda-recursive": {
		"prefix": "lambda-recursive",
		"body": [
			"auto ${1:f} = [&] (auto self) {",
			"\treturn self (self);$0",
			"};"
		]
	},

	"function": {
		"prefix": "function",
		"body": [
			"inline ${2:constexpr }auto ${1:f} ()${3: noexcept}",
			"{",
			"\t$0",
			"}"
		]
	},

	"auto &&": {
		"prefix": "auto&&",
		"body": "auto &&$0"
	},

	"structured binding": {
		"prefix": ["auto[]", "structured binding"],
		"body": "auto [${1:}] = ${2:/* tuple or array */};$0"
	},

	"iterator pair": {
		"prefix": ["iterator-pair", "ALL"],
		"body": [
			"begin (${1:v}), end ($1)$0"
		]
	},

	"iterator pair of tail": {
		"prefix": "TAIL",
		"body": [
			"next (begin (${1:v})), end ($1)$0"
		]
	},

	"iterator pair of istreambuf_iterator": {
		"prefix": "istreambuf_iterator",
		"body": "(istreambuf_iterator <char> (cin)), istreambuf_iterator <char> ()$0"
	},
	
	"iterator_traits<>::value_type": {
		"prefix": "iterator_traits<>::value_type",
		"body": "typename iterator_traits <${1:Iterator}>::value_type$0"
	},

	"cin": {
		"prefix": "cin>>",
		"body": [
			"${1:size_t} ${2:n}; cin >> $2;$0"
		]
	},

	"cout": {
		"prefix": "cout<<T",
		"body": "cout << ${1:ans} << endl;$0"
	},

	"cout bool": {
		"prefix": "cout<<bool",
		"body": "cout << (${1:ans} ? \"${2:true}\" : \"${3:false}\") << endl;$0"
	},

	"cout double": {
		"prefix": "cout<<double",
		"body": "cout << fixed << setprecision (15) << ${1:ans} << endl;$0"
	},

	"input with istream_iterator": {
		"prefix": "istream_iterator",
		"body": "copy_n (istream_iterator <iterator_traits <decltype (begin ($1))>::value_type> (cin), ${2:n}, back_inserter (${1:v}));$0"
	},

	"output with ostream_iterator": {
		"prefix": "ostream_iterator",
		"body": [
			"copy (begin (${1:ans}), end ($1), ostream_iterator <iterator_traits <decltype (begin ($1))>::value_type> (${2:cout}, \" \"));",
			"$2 << endl;$0"
		]
	},

	"unique": {
		"prefix": "unique()",
		"body": "${1:v}.erase (unique ($1.begin (), $1.end ()), $1.end ());$0"
	},

	"sum": {
		"prefix": "sum()",
		"body": "accumulate (begin (${1:v}), end ($1), typename iterator_traits <decltype (begin ($1))>::value_type {});$0"
	},

	"#define FOR": {
		"prefix": "#define FOR",
		"body": "#define FOR(i,b,e) for (common_type_t <decltype (b), decltype (e)> i = (b), i ## __end = (e); i < i ## __end; ++ i)$0"
	},

	"#define rep": {
		"prefix": "#define rep",
		"body": "#define rep(i,n) for (decay_t <decltype (n)> i = 0, i ## __len = (n); i < i ## __len; ++ i)$0"
	},

	"#define ALL": {
		"prefix": "#define ALL",
		"body": "#define ALL(x) begin (x), end (x)$0"
	},

	"#define TAIL": {
		"prefix": "#define TAIL",
		"body": "#define TAIL(x) next (begin (x)), end (x)$0"
	},

	"#define dump": {
		"prefix": "#define dump",
		"body": "#define dump(x) cerr << #x \" = \" << boolalpha << (x) << endl;$0"
	},

	"define inf": {
		"prefix": "define inf = 2e18",
		"body": "constexpr int64_t inf = 2e18;$0",
	},

	"define EPS": {
		"prefix": "define EPS = 1e-9",
		"body": "constexpr auto EPS = 1e-9;$0",
	},

	"define invalid": {
		"prefix": "define invalid = ~0",
		"body": "constexpr size_t invalid = ~0ull;$0",
	},
	
	"define PQR": {
		"prefix": "define PQR = ...",
		"body": [
		"template <typename T>",
		"using PQR = priority_queue <T, vector <T>, greater <T>>;$0"
		]
	},

	"define operator _zu": {
		"prefix": "define operator\"\" _zu",
		"body": "inline constexpr auto operator\"\" _zu (unsigned long long x) noexcept { return static_cast <size_t> (x); }$0"
	},

	"define operator _ll": {
		"prefix": "define operator\"\" _ll",
		"body": "inline constexpr auto operator\"\" _ll (unsigned long long x) noexcept { return static_cast <int64_t> (x); }$0"
	},

	"#include-gurad": {
		"prefix": ["#include-gurad", "include-guard"],
		"body": [
			"#ifndef ${1:/* macro */}",
			"#define $1",
			"$0",
			"#endif // $1",
			""
		]
	},

	"ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${1:LOCAL}",
			"$0",
			"#endif"
		]
	},





	"else": {
		"prefix": "else",
		"body": "else"
	},

	"static": {
		"prefix": "static",
		"body": "static"
	},

	"auto": {
		"prefix": "auto",
		"body": "auto"
	},

	"void": {
		"prefix": "void",
		"body": "void"
	},

	"false": {
		"prefix": "false",
		"body": "false"
	},

	"true": {
		"prefix": "true",
		"body": "true"
	},

	"nullptr": {
		"prefix": "nullptr",
		"body": "nullptr"
	},

	"const": {
		"prefix": "const",
		"body": "const"
	},

	"volatile": {
		"prefix": "volatile",
		"body": "volatile"
	},

	"mutable": {
		"prefix": "mutable",
		"body": "mutable"
	},

	"constexpr": {
		"prefix": "constexpr",
		"body": "constexpr"
	},

	"explicit": {
		"prefix": "explicit",
		"body": "explicit"
	},

	"inline": {
		"prefix": "inline",
		"body": "inline"
	},

	"operator": {
		"prefix": "operator",
		"body": "operator"
	},

	"private": {
		"prefix": "private",
		"body": "private:"
	},

	"protected": {
		"prefix": "protected",
		"body": "protected:"
	},

	"public": {
		"prefix": "public",
		"body": "public:"
	},

	"noexcept": {
		"prefix": "noexcept",
		"body": "noexcept"
	},

	"break": {
		"prefix": "break",
		"body": "break;"
	},

	"continue": {
		"prefix": "continue",
		"body": "continue;"
	},

	"default": {
		"prefix": "default",
		"body": "default"
	},

	"delete": {
		"prefix": "delete",
		"body": "delete"
	},

	"new": {
		"prefix": "new",
		"body": "new"
	},

	"typename": {
		"prefix": "typename",
		"body": "typename"
	},

	"__VA_ARGS__": {
		"prefix": "__VA_ARGS__",
		"body": "__VA_ARGS__"
	},

	"size_t": {
		"prefix": "size_t",
		"body": "size_t"
	},

	"int64_t": {
		"prefix": "int64_t",
		"body": "int64_t"
	},

	"unique_ptr": {
		"prefix": "unique_ptr",
		"body": "unique_ptr"
	},

	"1e9+7": {
		"prefix": "1e9+7",
		"body": "static_cast <int64_t> (1e9+7)"
	},

	"998244353": {
		"prefix": "998244353",
		"body": "998244353"
	}
}
